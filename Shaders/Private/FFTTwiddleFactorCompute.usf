#include "/Engine/Private/Common.ush"

#define COHERENCY_GRANULARITY 32

#define M_PI   3.1415926535897932384626433832795f
#define PI   3.1415926535897932384626433832795f
#define M_2PI (2.0f*M_PI)

RWTexture2D<float4> OutputTwiddle;

float Size;

struct Complex
{
    float Re;
    float Im;
};

Complex Add(Complex c1, Complex c2)
{
    Complex c;
    c.Re = c1.Re + c2.Re;
    c.Im = c1.Im + c2.Im;
    return c;
}

[numthreads(1, COHERENCY_GRANULARITY, 1)]
void TwiddleFactorsCS(uint3 ThreadId : SV_DispatchThreadID)
{
	// Set up some variables we are going to need  
    float sizeX, sizeY;
    OutputTwiddle.GetDimensions(sizeX, sizeY);
    sizeY = Size;
    float k = ThreadId.y * sizeY / pow(2.0, ThreadId.x + 1) % sizeY;

    // Twiddle factor
    Complex Twiddle;
    Twiddle.Re = cos(2 * PI * k / sizeY);
    Twiddle.Im = sin(2 * PI * k / sizeY);

    // Stride
    int ButterflySpan = pow(2, ThreadId.x);

    // Judege ButterflyWing is TopWing or BottomWing
    int ButterflyWing;
    if (ThreadId.y % pow(2, ThreadId.x + 1) < pow(2, ThreadId.x))
        ButterflyWing = 1;
    else
        ButterflyWing = 0;

    // First stage, bit reserved indices
    if (ThreadId.x == 0)
    {
        // Invert Order
        int InitIndices[512];
        int Levels = log2(sizeY);
        int i;
        for (i = 0; i < Levels; i++)
            InitIndices[i] = 0;
        for (i = 0; i < Levels; i++)
        {
            int Stride = 1 << i;
            int Add = 1 << (Levels - 1 - i);
            for (int j = 0; j < sizeY; j++)
            {
                if ((j / Stride) % 2 != 0)
                    InitIndices[j] += Add;
            }
        }

        if (ButterflyWing == 1)
            OutputTwiddle[ThreadId.xy] = float4(Twiddle.Re, Twiddle.Im, InitIndices[ThreadId.y], InitIndices[ThreadId.y + 1]);
        else
            OutputTwiddle[ThreadId.xy] = float4(Twiddle.Re, Twiddle.Im, InitIndices[ThreadId.y - 1], InitIndices[ThreadId.y]);
    }
    // Log2N stage
    else
    {
        if (ButterflyWing == 1)
            OutputTwiddle[ThreadId.xy] = float4(Twiddle.Re, Twiddle.Im, ThreadId.y, ThreadId.y + ButterflySpan);
        else
            OutputTwiddle[ThreadId.xy] = float4(Twiddle.Re, Twiddle.Im, ThreadId.y - ButterflySpan, ThreadId.y);
    }
}